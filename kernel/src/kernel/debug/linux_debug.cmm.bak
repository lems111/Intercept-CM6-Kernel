 local &srcdrive
 local &srcpath
 &srcdrive="S:"
 &srcpath="&srcdrive"+"\samba\linux"


 screen.on

             
; Debugger Reset

 winpage.reset
 area.reset
 WINPOS 0. 26. 75. 8. 0. 0. W000
 area
 
 print "resetting..."
 
 RESet


; Initializing Debugger
 
 print "initializing..."

SYStem.CPU arm1176jzf
SYStem.JC RTCK
SYStem.Option mmu off ; turn mmu off
SYStem.Option dacr on ; give Debugger global write permissions
SYStem.Option enreset off
SYStem.Option trst off
SYStem.MultiCore IRPRE 4
SYStem.MultiCore DRPRE 1
SYStem.MultiCore ETBIRPOST 5
SYStem.MultiCore ETBDRPOST 1

 TrOnchip.Set DABORT OFF
 TrOnchip.Set PABORT OFF
 TrOnchip.Set UNDEF OFF         ; may be used by Linux for FPU detection
 SYStem.Option MMUSPACES ON     ; enable space ids to virtual addresses

 SYStem.Up

 SETUP.IMASKASM ON              ; lock interrupts while single stepping


; Load the Linux kernel

 ; If you are using a flashed kernel, or if you're loading 
 ; your kernel via TFTP, use the boot monitor to do so.
 
 ; Use the next lines (loading the kernel, setting registers
 ; and boot parameters) only to load the kernel into
 ; RAM using the debugger.

 ; vmlinux starts physically at RAM start + 0x8000 
 ; We have to adjust it from the virtual start address 
 ; to the physical start address
 ; i.e.: Data.LOAD.Elf vmlinux <physical start>-<virtual start>


 Data.LOAD.Elf *vmlinux /nocode /strippart 12.


; Open a Code Window -- we like to see something

 WINPOS 0. 0. 75. 20.
 Data.List
 screen
 

; Declare the MMU format to the debugger
 ; - table format is "LINUX"
 ; - table base address is at label "swapper_pg_dir"
 ; - kernel address translation
 ; Map the virtual kernel symbols to physical addresses to give 
 ; the debugger access to it before CPU MMU is initialized
 ; Here, we assume 32MB RAM at physical address 0x20000000

 print "initializing debugger MMU..."
 MMU.FORMAT LINUX swapper_pg_dir 0xc0000000--0xcfffffff 0x50000000
 
 ; prepare debugger translation
 TRANSlation.Create 0xc0000000--0xcfffffff 0x50000000   ; map kernel pages at RAM start
 TRANSlation.COMMON 0xc0000000--0xffffffff              ; common area for kernel and processes
 TRANSlation.TableWalk ON       ; debugger uses a table walk to decode virtual addresses
 TRANSlation.ON                 ; switch on debugger(!) address translation 
 

; Initialize Linux Awareness

 ; Note that the Linux awareness needs the kernel symbols to work
 
 print "initializing Linux support..."
 TASK.CONFIG linux          ; loads Linux awareness (linux.t32)
 MENU.ReProgram linux       ; loads Linux menu (linux.men)
 HELP.FILTER.Add rtoslinux  ; add linux awareness manual to help filter

 TASK.sYmbol.Option MMUSCAN OFF  ; not necessary with tablewalk
 
 ; switch on symbol autoloader
 
 sYmbol.AutoLoad.CHECKLINUX "do "+os.ppd()+"/autoload "
 
 ; Group kernel area to be displayed with red bar
 GROUP.Create "kernel" 0xc0000000--0xffffffff /RED


 
; -------- Application Debugging --------------
; ------------- e.g. "hello" ------------------

 ; activate autoloader for processes:
 TASK.sYmbol.Option AutoLoad Process

 print "please log in and start 'hello'"

 ; script based
   ; using the script based application debugging
   ; gives more control over the single commands
   ; see file "app_debug.cmm"
   
   ; do app_debug hello
   
 ; process watch system
   ; the process watch system automates the actions
   ; for application debugging
   
   WINPOS 55. 25. 40. 4.
   TASK.Watch.View "hello"

   Go

 enddo
 
